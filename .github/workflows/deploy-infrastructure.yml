name: Deploy Treza Infrastructure

on:
  push:
    branches:
      - main
    paths:
      - 'lambda/**'
      - 'modules/**'
      - 'terraform/**'
      - '.github/workflows/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - staging
        - prod
      auto_approve:
        description: 'Auto approve deployment'
        required: false
        default: true
        type: boolean

jobs:
  deploy-infrastructure:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'dev' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.6.6
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-2
    
    - name: Setup environment configuration
      run: |
        cd terraform
        cp environments/${{ github.event.inputs.environment || 'dev' }}.tfvars terraform.tfvars
        cp environments/backend-${{ github.event.inputs.environment || 'dev' }}.conf backend.conf
        
        echo "📋 Environment: ${{ github.event.inputs.environment || 'dev' }}"
        echo "📋 Configuration:"
        head -10 terraform.tfvars
    
    - name: Create backend resources if needed
      run: |
        echo "🏗️ Creating backend resources..."
        ./scripts/create-backend.sh ${{ github.event.inputs.environment || 'dev' }}
    
    - name: Build Lambda functions
      run: |
        echo "📦 Building Lambda functions..."
        ./modules/lambda/build-functions.sh
    
    - name: Initialize Terraform
      run: |
        cd terraform
        terraform init -backend-config=backend.conf
    
    - name: Import existing resources if they exist
      run: |
        cd terraform
        echo "🔄 Importing existing resources to avoid conflicts..."
        
        # Import all existing networking components
        echo "📋 Finding and importing existing networking resources..."
        
        # Import VPC
        VPC_ID=$(aws ec2 describe-vpcs --filters "Name=tag:Name,Values=treza-${{ github.event.inputs.environment || 'dev' }}-vpc" --query 'Vpcs[0].VpcId' --output text 2>/dev/null || echo "")
        if [ "$VPC_ID" != "None" ] && [ ! -z "$VPC_ID" ]; then
          terraform import module.networking.aws_vpc.main $VPC_ID || echo "VPC import: skipped"
          
          # Import Internet Gateway
          IGW_ID=$(aws ec2 describe-internet-gateways --filters "Name=attachment.vpc-id,Values=$VPC_ID" --query 'InternetGateways[0].InternetGatewayId' --output text 2>/dev/null || echo "")
          if [ "$IGW_ID" != "None" ] && [ ! -z "$IGW_ID" ]; then
            terraform import module.networking.aws_internet_gateway.main $IGW_ID || echo "IGW import: skipped"
          fi
          
          # Import public subnets
          PUBLIC_SUBNET_IDS=$(aws ec2 describe-subnets --filters "Name=vpc-id,Values=$VPC_ID" "Name=tag:Name,Values=*public*" --query 'Subnets[].SubnetId' --output text 2>/dev/null || echo "")
          for i in $(echo $PUBLIC_SUBNET_IDS | tr ' ' '\n' | head -1); do
            if [ ! -z "$i" ] && [ "$i" != "None" ]; then
              terraform import module.networking.aws_subnet.public[0] $i || echo "Public subnet import: skipped"
              break
            fi
          done
          
          # Import private subnets  
          PRIVATE_SUBNET_IDS=$(aws ec2 describe-subnets --filters "Name=vpc-id,Values=$VPC_ID" "Name=tag:Name,Values=*private*" --query 'Subnets[].SubnetId' --output text 2>/dev/null || echo "")
          for i in $(echo $PRIVATE_SUBNET_IDS | tr ' ' '\n' | head -1); do
            if [ ! -z "$i" ] && [ "$i" != "None" ]; then
              terraform import module.networking.aws_subnet.private[0] $i || echo "Private subnet import: skipped"
              break
            fi
          done
        fi
        
        # Import existing resources (ignore errors if they don't exist or are already imported)
        terraform import module.ecs.aws_ecr_repository.terraform_runner treza-${{ github.event.inputs.environment || 'dev' }}-terraform-runner || echo "ECR repository: skipped"
        terraform import module.dynamodb_streams.aws_dynamodb_table.enclaves treza-enclaves-${{ github.event.inputs.environment || 'dev' }} || echo "DynamoDB table: skipped"
        terraform import module.iam.aws_iam_role.lambda_execution treza-${{ github.event.inputs.environment || 'dev' }}-lambda-execution-role || echo "Lambda IAM role: skipped"
        terraform import module.iam.aws_iam_role.step_functions_execution treza-${{ github.event.inputs.environment || 'dev' }}-step-functions-execution-role || echo "Step Functions IAM role: skipped"
        terraform import module.iam.aws_iam_role.ecs_task_execution treza-${{ github.event.inputs.environment || 'dev' }}-ecs-task-execution-role || echo "ECS task execution role: skipped"
        terraform import module.iam.aws_iam_role.ecs_task treza-${{ github.event.inputs.environment || 'dev' }}-ecs-task-role || echo "ECS task role: skipped"
        terraform import module.state_backend.aws_dynamodb_table.terraform_locks treza-${{ github.event.inputs.environment || 'dev' }}-terraform-locks || echo "State lock table: skipped"
        
        # Import CloudWatch Log Groups
        terraform import module.ecs.aws_cloudwatch_log_group.terraform_runner /ecs/treza-${{ github.event.inputs.environment || 'dev' }}-terraform-runner || echo "ECS log group: skipped"
        terraform import module.step_functions.aws_cloudwatch_log_group.step_functions /aws/stepfunctions/treza-${{ github.event.inputs.environment || 'dev' }}-deployment || echo "Step Functions log group: skipped"
        
        # Import Lambda Functions
        terraform import module.lambda_functions.aws_lambda_function.validation treza-${{ github.event.inputs.environment || 'dev' }}-validation || echo "Validation Lambda: skipped"
        terraform import module.lambda_functions.aws_lambda_function.error_handler treza-${{ github.event.inputs.environment || 'dev' }}-error-handler || echo "Error handler Lambda: skipped"
        terraform import module.lambda_functions.aws_lambda_function.enclave_trigger treza-${{ github.event.inputs.environment || 'dev' }}-enclave-trigger || echo "Enclave trigger Lambda: skipped"
        
        # Skip CloudWatch Query Definitions - they'll be handled differently
        
        # Import Lambda CloudWatch Log Groups
        terraform import module.lambda_functions.aws_cloudwatch_log_group.validation /aws/lambda/treza-${{ github.event.inputs.environment || 'dev' }}-validation || echo "Validation Lambda log group: skipped"
        terraform import module.lambda_functions.aws_cloudwatch_log_group.error_handler /aws/lambda/treza-${{ github.event.inputs.environment || 'dev' }}-error-handler || echo "Error handler Lambda log group: skipped"
        terraform import module.lambda_functions.aws_cloudwatch_log_group.enclave_trigger /aws/lambda/treza-${{ github.event.inputs.environment || 'dev' }}-enclave-trigger || echo "Enclave trigger Lambda log group: skipped"
        
        # Import Step Functions State Machines
        terraform import module.step_functions.aws_sfn_state_machine.deployment treza-${{ github.event.inputs.environment || 'dev' }}-deployment || echo "Deployment state machine: skipped"
        terraform import module.step_functions.aws_sfn_state_machine.cleanup treza-${{ github.event.inputs.environment || 'dev' }}-cleanup || echo "Cleanup state machine: skipped"
        
        # Import Elastic IPs (NAT Gateway EIPs) - these are harder to predict, so we'll handle them differently
        echo "📋 Checking for existing Elastic IPs..."
        aws ec2 describe-addresses --query 'Addresses[?Domain==`vpc`].AllocationId' --output text | head -2 | while read -r allocation_id; do
          if [ ! -z "$allocation_id" ]; then
            terraform import module.networking.aws_eip.nat[0] $allocation_id 2>/dev/null || echo "EIP import attempted"
            break
          fi
        done
        
        echo "✅ Import phase completed"
      continue-on-error: true
    
    - name: Validate Terraform
      run: |
        cd terraform
        terraform validate
    
    - name: Plan Terraform
      run: |
        cd terraform
        terraform plan -out=tfplan
    
    - name: Apply Terraform
      if: github.event.inputs.auto_approve == 'true' || github.event_name == 'push'
      run: |
        cd terraform
        terraform apply -auto-approve tfplan
    
    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Amazon ECR
      run: |
        aws ecr get-login-password --region us-west-2 | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-west-2.amazonaws.com
    
    - name: Build and push Docker image
      run: |
        cd docker/terraform-runner
        IMAGE_URI="${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-west-2.amazonaws.com/treza-${{ github.event.inputs.environment || 'dev' }}-terraform-runner:latest"
        docker build -t $IMAGE_URI .
        docker push $IMAGE_URI
        echo "✅ Docker image pushed: $IMAGE_URI"
    
    - name: Output results
      if: github.event.inputs.auto_approve == 'true' || github.event_name == 'push'
      run: |
        cd terraform
        echo "## 🎉 Deployment Complete!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Environment**: ${{ github.event.inputs.environment || 'dev' }}" >> $GITHUB_STEP_SUMMARY
        echo "**Region**: us-west-2" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📋 Infrastructure Outputs:" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        terraform output || echo "Outputs will be available shortly" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🔗 Next Steps:" >> $GITHUB_STEP_SUMMARY
        echo "1. Update your treza-app DynamoDB table name" >> $GITHUB_STEP_SUMMARY
        echo "2. Test the end-to-end workflow" >> $GITHUB_STEP_SUMMARY
        echo "3. Monitor CloudWatch for deployment status" >> $GITHUB_STEP_SUMMARY

    - name: Comment on commit
      if: github.event.inputs.auto_approve == 'true' || github.event_name == 'push'
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.repos.createCommitComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            commit_sha: context.sha,
            body: `🎉 **Treza Infrastructure Deployed Successfully!**
            
            **Environment**: ${{ github.event.inputs.environment || 'dev' }}
            **Region**: us-west-2
            **Status**: ✅ Complete
            
            The infrastructure is ready for enclave creation testing!`
          })
